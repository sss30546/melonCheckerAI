                 #!/usr/bin/env python3

import os
import json
import datetime
import streamlit as st
from groq import Groq
from dotenv import load_dotenv

st.set_page_config(page_title="AI Melon Ripeness Bot", page_icon="üçà", layout="wide")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ API KEY ‡∏à‡∏≤‡∏Å Secrets ‡∏´‡∏£‡∏∑‡∏≠ .env
load_dotenv(".env")
GROQ_API_KEY = st.secrets.get("GROQ_API_KEY", os.getenv("GROQ_API_KEY"))
client = Groq(api_key=GROQ_API_KEY)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
def ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠(‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß):
    ‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏ß‡∏° = 14
    try:
        ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß = int(‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß)
        ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ = max(0, ‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏ß‡∏° - ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß)
        return ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    except:
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ä‡∏ï‡∏Å‡∏±‡∏ö Groq
def chatboot(question):
    system_prompt = """ 
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏•‡πà‡∏≠‡∏ô... (‡∏Ç‡∏≠‡∏¢‡πà‡∏≠‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà system_prompt ‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
"""
    response = client.chat.completions.create(
        model="llama3-8b-8192",  # ‚úÖ ‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question},
        ],
        temperature=0.2,
        max_tokens=1024,
    )
    return response.choices[0].message.content.strip()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡∏Å
def ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ô‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢(‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡∏Å):
    ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ = datetime.date.today()
    ‡∏ß‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ = (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡∏Å).days
    ‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ô‡πà‡∏≤ = 13 + 7
    ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ = max(0, ‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ô‡πà‡∏≤ - ‡∏ß‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ)
    return ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠

# main app
def main():
    st.markdown("""
        <style>
        body { background-color: #000000; }
        .stForm { background-color: #000000; padding: 2rem; border-radius: 12px; }
        </style>
    """, unsafe_allow_html=True)

    st.title("üçà ‡πÅ‡∏ä‡∏ï‡∏ö‡∏≠‡∏ï‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞")
    st.subheader("‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏•‡∏≠‡∏ô ‡∏î‡πâ‡∏ß‡∏¢ AI")

    if "messages" not in st.session_state:
        st.session_state["messages"] = [
            {"role": "assistant", "content": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡πâ‡∏≤‡∏ß... (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)"}
        ]

    with st.form("chat_form"):
        query = st.text_input("üó£Ô∏è ‡∏Ñ‡∏∏‡∏ì:", placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏•‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...").strip()
        submitted = st.form_submit_button("üöÄ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")

        if submitted and query:
            answer = chatboot(query)
            st.session_state["messages"].append({"role": "user", "content": query})
            st.session_state["messages"].append({"role": "assistant", "content": answer})
        elif submitted and not query:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ä‡∏ï
    for msg in st.session_state["messages"]:
        if msg["role"] == "user":
            st.markdown(f"**üßë‚Äçüåæ ‡∏Ñ‡∏∏‡∏ì:** {msg['content']}")
        else:
            try:
                data = json.loads(msg["content"])
                with st.container():
                    st.markdown("#### ü§ñ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏°‡∏•‡∏≠‡∏ô")
                    col1, col2 = st.columns(2)
                    col1.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å", data.get("ripeness", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
                    col1.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô", data.get("brix", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
                    col1.metric("‡∏™‡∏µ", data.get("‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏•‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
                    col2.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", data.get("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
                    col2.metric("‡∏Ñ‡πà‡∏≤ pH", data.get("ph", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
                    ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ = ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠(data.get("‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ô‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢"))
                    col2.metric("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ô‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢", f"{‡∏ß‡∏±‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠} ‡∏ß‡∏±‡∏ô" if ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ is not None else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
                    col2.metric("‡∏Å‡∏•‡∏¥‡πà‡∏ô", data.get("‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÄ‡∏°‡∏•‡πà‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
                    st.info(data.get("reason", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"))
            except:
                st.markdown(f"**ü§ñ ‡∏≠‡∏≠‡∏á‡∏ï‡∏≠‡∏á:** {msg['content']}")

    st.markdown("---")
    st.caption("üå± ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡∏° Sn.Guardian gen X...")

if __name__ == "__main__":
    main()

